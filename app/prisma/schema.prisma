generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider = "postgresql"
    url      = env("POSTGRES_URL")
}

model User {
    id Int @id @default(autoincrement())

    name     String
    email    String  @unique
    password String
    role     Role    @default(USER)
    verified Boolean @default(false)

    provider   String?
    providerId String?

    reviews           Review[]
    cart              Cart?
    wishList          WishList?
    orders            Order[]
    verificationToken VerificationToken?

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
}

model Cart {
    id Int @id @default(autoincrement())

    token       String
    totalAmount Int    @default(0)

    cartItems CartItem[]

    user   User? @relation(fields: [userId], references: [id])
    userId Int?  @unique
}

model CartItem {
    id Int @id @default(autoincrement())

    quantity Int @default(1)

    product   Product @relation(fields: [productId], references: [id])
    productId Int
    cart      Cart    @relation(fields: [cartId], references: [id])
    cartId    Int

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
}

model Category {
    id Int @id @default(autoincrement())

    name     String    @unique
    products Product[]
}

model WishList {
    id Int @id @default(autoincrement())

    user   User @relation(fields: [userId], references: [id])
    userId Int  @unique

    products Product[]

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
}

model Product {
    id Int @id @default(autoincrement())

    name        String
    description String
    imageUrl    String
    price       Int
    sale        Int
    rate        Float

    category   Category? @relation(fields: [categoryId], references: [id])
    categoryId Int?

    wishList   WishList? @relation(fields: [wishListId], references: [id])
    wishListId Int?

    variants  ProductItem[]
    reviews   Review[]
    cartItems CartItem[]

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
}

model ProductItem {
    id Int @id @default(autoincrement())

    name  String
    price Int

    options Option[]

    product   Product @relation(fields: [productId], references: [id])
    productId Int
}

model Review {
    id Int @id @default(autoincrement())

    product   Product @relation(fields: [productId], references: [id])
    productId Int

    user   User @relation(fields: [userId], references: [id])
    userId Int

    content String
    rate    Int

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
}

model Option {
    id Int @id @default(autoincrement())

    name String @unique

    optionItems OptionItem[]

    product   ProductItem @relation(fields: [productId], references: [id])
    productId Int
}

model OptionItem {
    id Int @id @default(autoincrement())

    name String @unique

    option   Option @relation(fields: [optionId], references: [id])
    optionId Int
}

model Order {
    id Int @id @default(autoincrement())

    user   User? @relation(fields: [userId], references: [id])
    userId Int?

    token       String
    totalAmount Int
    status      OrderStatus @default(PENDING)
    paymentId   String?

    items Json

    name    String
    surname String
    email   String
    phone   String
    address String
    comment String?

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
}

model VerificationToken {
    id Int @id @default(autoincrement())

    user   User @relation(fields: [userId], references: [id])
    userId Int  @unique

    token String @unique

    expires   DateTime @default(now())
    createdAt DateTime @default(now())

    @@unique([userId, token])
}

enum Role {
    USER
    ADMIN
}

enum OrderStatus {
    PENDING
    DELIVERED
    SUCCEEDED
    CANCELLED
}
